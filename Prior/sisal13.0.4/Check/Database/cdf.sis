% cdf.sis -- This contains functions to define parts of a Candis record
%      in Sisal representation

%$entry=cdfcreate,cdfcomment,cdfparam,cdfdim,cdffld,cdfgetpar,cdfgetdim,cdfgetddata,cdfgetfld,cdfgetfdata

define cdfcreate, cdfcomment, cdfparam, cdfdim, cdffld, cdfgetpar,
     cdfgetdim, cdfgetddata, cdfgetfld, cdfgetfdata

% cdf.types -- define types for a record isomorphic to a subset of Candis
type cdf_cline = array[character];
type cdf_clist = array[cdf_cline];
type cdf_param = record[pname: cdf_cline; pval: real];
type cdf_plist = array[cdf_param];
type cdf_dim = record[dname: cdf_cline; dsize: integer; ddata: array[real]];
type cdf_dlist = array[cdf_dim];
type cdf_field = record[fname: cdf_cline; num_dims: integer;
     cdf_dhandles: array[integer]; tsize: integer; fdata: array[real]];
type cdf_flist = array[cdf_field];
type cdf = record[name: cdf_cline; instance: integer; comments: cdf_clist;
     params: cdf_plist; dims: cdf_dlist; fields: cdf_flist];

type onec = array[character];

% cdfcreate -- define a null Candis record except for file name
function cdfcreate(file_name: cdf_cline; instance: integer; returns cdf)

  let
    nullcom := array cdf_clist[];
    nullpar := array cdf_plist[];
    nulldim := array cdf_dlist[];
    nullfld := array cdf_flist[];

  in
    record[name: file_name; instance: instance; comments: nullcom;
         params: nullpar; dims: nulldim; fields: nullfld]

  end let

end function % cdfcreate

% cdfcomment -- add a comment to a Candis record
function cdfcomment(cdf_record: cdf; comment: cdf_cline; returns cdf)

  cdf_record replace[comments: array_addh(cdf_record.comments, comment)]

end function % cdfcomment

% cdfparam -- add a parameter to a Candis record
function cdfparam(cdf_record: cdf; pname: cdf_cline; pval: real;
     returns cdf)

  let
    parameter := record[pname: pname; pval: pval];

  in
    cdf_record replace[params: array_addh(cdf_record.params, parameter)]

  end let

end function % cdfparam

% cdfdim -- add a dimension to a Candis record
function cdfdim(cdf_record: cdf; dim_name: cdf_cline; dim_size: integer;
     start_val, increment: real; returns cdf, integer)

  let
    data := for i in 0, dim_size - 1
      data_val := start_val + real(i)*increment;
    returns
      array of data_val
    end for;

    dim_record := record[dname: dim_name; dsize: dim_size; ddata: data];
    new_cdf_record := cdf_record replace[dims:
         array_addh(cdf_record.dims, dim_record)];

    dhandle1 := array_size(new_cdf_record.dims);
    dhandle := if (dhandle1 > 4) then
      error[integer]
    else
      dhandle1
    end if;

  in
    new_cdf_record, dhandle - 1

  end let

end function % cdfdim
 
% cdfidim -- add a possibly irregular dimension to a Candis record
function cdfidim(cdf_record: cdf; dim_name: cdf_cline; dim_size: integer;
     data: array[real]; returns cdf, integer)

  let

    dim_record := record[dname: dim_name; dsize: dim_size;
         ddata: array_setl(data, 0)];
    new_cdf_record := cdf_record replace[dims:
         array_addh(cdf_record.dims, dim_record)];

    dhandle1 := array_size(new_cdf_record.dims);
    dhandle := if (dhandle1 > 4) then
      error[integer]
    else
      dhandle1
    end if;

  in
    new_cdf_record, dhandle - 1

  end let

end function % cdfidim

% cdffld -- add a field to the Candis data structure
function cdffld(cdf_record: cdf; field_name: cdf_cline; num_dims: integer;
     dh1, dh2, dh3, dh4: integer; fdata: array[real]; returns cdf)

  let
    dhands1 := array[1: dh1];
    dhands2 := array_addh(dhands1, dh2);
    dhands3 := array_addh(dhands2, dh3);
    dhands := array_addh(dhands3, dh4);

    max_dims := array_size(cdf_record.dims);
    real_num_dims := if (num_dims > max_dims) then
      error[integer]
    else
      num_dims
    end if;

    tsize := for initial
      i := 1;
      ts := 1;
    while (i <= real_num_dims) repeat
      i := old i + 1;
      ts := (old ts)*cdf_record.dims[dhands[old i] + 1].dsize;
    returns
      value of ts
    end for;
    
    fld_record := record[fname: field_name; num_dims: num_dims;
         cdf_dhandles: dhands; tsize: tsize; fdata: array_setl(fdata, 0)];

  in
    cdf_record replace[fields: array_addh(cdf_record.fields, fld_record)]

  end let

end function % cdffld

function streq(a, b: array[character]; returns boolean)
  if (is error(a) | is error(b)) then
    false
  elseif (array_size(a) ~= array_size(b)) then
    false
  else
    let
      s := for i in array_liml(a), array_limh(a)
        x := if (a[i] = b[i]) then 0 else 1 end if;
      returns
        value of sum x
      end for;
    in
      s = 0
    end let
  end if
end function % streq

% cdfgetpar -- given a parameter name, return parameter value
function cdfgetpar(cdf_record: cdf; pname: cdf_cline; returns real)
  for initial
    i := 1;
    val := 0;
  while (i <= array_size(cdf_record.params)) repeat
    oi := old i;
    oval := old val;
    val := if (streq(pname, cdf_record.params[oi].pname)) then
      oi
    else
      oval
    end if;
    i := oi + 1;
  returns
    value of if (val > 0) then
               cdf_record.params[val].pval
             else

% if this error generated, then the named parameter does not exist
               error[real]
             end if
  end for
end function % cdfgetpar

% cdfgetdim -- given a dimension name, this returns handle and dim info
function cdfgetdim(cdf_record: cdf; dname: cdf_cline; returns integer, cdf_dim)
  for initial
    i := 1;
    val := 0;
  while (i <= array_size(cdf_record.dims)) repeat
    oi := old i;
    oval := old val;
    val := if (streq(dname, cdf_record.dims[oi].dname)) then
      oi
    else
      oval
    end if;
    i := oi + 1;
  returns
    value of val - 1
    value of if (val > 0) then
               cdf_record.dims[val]
             else

% if this error is generated, then the named dimension does not exist
               error[cdf_dim]
             end if
  end for
end function % cdfgetdim

% cdfgetddata -- get the data grid array from a cdf
function cdfgetddata(cdf_record: cdf; dname: cdf_cline; returns integer,
     array[real])
  let
    i, cdfd := cdfgetdim(cdf_record, dname);
    dataarray := cdfd.ddata;
  in
    i, dataarray
  end let
end function % cdfgetddata

% cdfgetfld -- given a field name, this returns field info
function cdfgetfld(cdf_record: cdf; fname: cdf_cline; returns cdf_field)
  for initial
    i := 1;
    val := 0;
  while (i <= array_size(cdf_record.fields)) repeat
    oi := old i;
    oval := old val;
    val := if (streq(fname, cdf_record.fields[oi].fname)) then
      oi
    else
      oval
    end if;
    i := oi + 1;
  returns
    value of if (val > 0) then
               cdf_record.fields[val]
             else

% if this error is generated, then the named field does not exist
               error[cdf_field]
             end if
  end for
end function % cdfgetfld

% cdfgetfdata -- extract the data array from a particular field in a cdf
function cdfgetfdata(cdf_record: cdf; fname: cdf_cline; returns array[real])
  let
    cdff := cdfgetfld(cdf_record, fname);
  in
    cdff.fdata
  end let
end function % cdfgetfdata


