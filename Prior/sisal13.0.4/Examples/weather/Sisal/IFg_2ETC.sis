DEFINE IFACTg_2ETC
TYPE ArrReal1 = ARRAY [real]

function IFACTg_2ETC(m, la, iink, jink, jump, inc1, inc2 : integer; 
		 	a, ci, trigs : ArrReal1
		 	RETURNS ArrReal1)
FOR INITIAL
k := 0;
ia := 1;
ja := 1;
c := ci;

WHILE k <= m / 2 REPEAT
k := old k + la;
ia, ja, c := 
  IF old k = 0 
  THEN  LET ia1, ja1, c1 := 	

	FOR INITIAL
	l := 1;
	ia1 := old ia;
	ja1 := old ja;
	c1 := old c;

	WHILE l <= la REPEAT
	l := old l + 1;
	ia1 := old ia1 + inc1;
	ja1 := old ja1 + inc2;
	ib := old ia1 + iink;
	jb := old ja1 + jink;
	c1 := old c1[old ja1 : a[old ia1] + a[ib]; jb : a[old ia1] - a[ib]]; 

	RETURNS VALUE of ia1
		VALUE of ja1
		VALUE of c1
	END FOR

	IN ia1, ja1 + jump, c1
	END LET

  ELSEIF 2 * old k < m 
  THEN  LET ia1, ja1, c1 := 

	FOR INITIAL
	kb := old k * 2;
	lower := iink + 2;
	lupper := iink + jink * 2 - 2;
	l := lower;
	ia1 := old ia;
	ja1 := old ja;
	c1 := old c;

	WHILE l <= lupper REPEAT
	l := old l + 4;
	ia1 := old ia1 + inc1;
	ja1 := old ja1 + inc2;
	jb := old ja1 + jink;
	ibxx := old l - old ia1;
	cjb := a[old ia1] - a[ibxx];
	djb := a[old ia1 + 1] + a[ibxx + 1];
	tempr := cjb * trigs[kb + 1] - djb * trigs[kb + 2];
	tempi := cjb * trigs[kb + 2] + djb * trigs[kb + 1];
	c1 := old c1[old ja1 : a[old ia1] + a[ibxx]; jb : tempr;
		   old ja1 + 1 : a[old ia1 + 1] - a[ibxx + 1]; jb + 1 : tempi];

	RETURNS VALUE of ia1
		VALUE of ja1
		VALUE of c1
	END FOR

	IN ia1, ja1 + jump, c1
	END LET

ELSE 	FOR INITIAL
	l := 1;
	ia1 := old ia;
	ja1 := old ja;
	c1 := old c;

	WHILE  l <= la REPEAT
	l := old l + 1;
	ia1 := old ia1 + inc1;
	ja1 := old ja1 + inc2;
	jb := old ja1 + jink;
	c1 := old c1[old ja1 : 2.0 * a[old ia1]; 
			jb : -2.0 * a[old ia1 + 1]];

	RETURNS VALUE of ia1
		VALUE of ja1
		VALUE of c1
	END FOR 

 END IF;

RETURNS VALUE of c
END FOR
END function
