/**************************************************************************/
/* FILE   **************          info.cc          ************************/
/************************************************************************ **/
/* Author: Patrick Miller February 17 2001                                */
/* Copyright (C) 2001 Patrick J. Miller                                   */
/**************************************************************************/
/*  */
/**************************************************************************/
#include "IFCore.hh"

namespace sisalc {

   /**************************************************************************/
   /* GLOBAL **************            info           ************************/
   /************************************************************************ **/
   /*  */
   /**************************************************************************/
   info::info(TypeCode kind) : mKind(kind), mInfo1(0), mInfo2(0) {
   }

   /**************************************************************************/
   /* GLOBAL **************           valid           ************************/
   /************************************************************************ **/
   /*  */
   /**************************************************************************/
   bool info::valid() const {
      return true;
   }
   /**************************************************************************/
   /* GLOBAL **************         setParent         ************************/
   /************************************************************************ **/
   /*  */
   /**************************************************************************/
   void info::setParent(module* m) {
      static int indent = -1;
      indent++;
      char buf[100];
      buf[0] = 0;
      for(int i = 0; i < indent; ++i) strcat(buf,"   ");
      
      mParent = m;
      if ( mInfo1 ) mInfo1->setParent(m);
      if ( mInfo2 ) mInfo2->setParent(m);

      indent--;
   }

   /**************************************************************************/
   /* GLOBAL **************           label           ************************/
   /************************************************************************ **/
   /*  */
   /**************************************************************************/
   int info::label() const {
      assert(mParent);
      return mParent->offset(this);
   }

   int info::i1() const { return label(); }
   int info::i2() const { return mKind; }
   int info::i3() const { return (mInfo1)?mInfo1->label():-1; }
   int info::i4() const { return (mInfo2)?mInfo2->label():-1; }

   /**************************************************************************/
   /* GLOBAL **************            list           ************************/
   /************************************************************************ **/
   /*  */
   /**************************************************************************/
   vector<const info*> info::list() const {
      vector<const info*> result;
      for(const info* P = this; P; P = P->mInfo2) {
         result.push_back(P->mInfo1);
      }
      return result;
   }

   /**************************************************************************/
   /* GLOBAL **************           names           ************************/
   /************************************************************************ **/
   /*  */
   /**************************************************************************/
   vector<string> info::names() const {
      vector<string> result;
      for(const info* P = this; P; P = P->mInfo2) {
         result.push_back(P->spragma("na"));
      }
      return result;
   }
}

