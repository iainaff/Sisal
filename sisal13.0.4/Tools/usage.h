/* M */  char *Usage[] = {
/* a */  "-%                    Insert SISAL source line comments in the generated code",
/* c */  "-A<num>              *Set loop parallelization ``At'' level to <num>",
/* h */  "-C                    Stop after generating C code",
/* i */  "-CC=<path>            Use <path> as the C compiler",
/* n */  "-CPP                  Run the SISAL files through the C preprocessor and stop",
/* e */  "-D                   *Use DEBUG version of frontend",
/*   */  "-D<defn>              Define macro for C preprocessor",
/* G */  "-DI                  *Compile to DI stye IF1",
/* e */  "-FF=<path>            Use <path> as the FORTRAN compiler",
/* n */  "-I<num>              *Set assumed iteration count for loops",
/* e */  "-I<path>              Search <path> for C include files",
/* r */  "-IF0                  Compile to IF0 and stop",
/* a */  "-IF1                  Compile to IF1 and stop",
/* t */  "-IF3                  Add IF3 output",
/* e */  "-Keep                 Keep intermediate files instead of deleting them",
/* d */  "-L<num>              *Set nested parallelization threshold to <num>",
/*   */  "-Loopstyle=<stylechar> Set the default loop parallelism style to <stylechar>",
/* D */  "-MEM                 *Stop after memory allocation phase",
/* o */  "-MONO                 Stop after compiling and linking IF1 files",
/*   */  "-N<num>              *Set nested parallelization threshold to <num>",
/* N */  "-NoSliceThrottle      Turn off the slice throttle feature (MinSlice estimate)",
/* o */  "-O                    Use enabled optimizations",
/* t */  "-OPT                 *Stop after IF1 optimizations",
/*   */  "-P<num>              *Assume <num> processors are available for partitioning",
/* C */  "-PART                *Stop after partitioning phase",
/* h */  "-Prof                *Profile compiler execution",
/* a */  "-S                    Stop after generating assembly language",
/* n */  "-SliceThrottle        Turn on the slice throttle feature (MinSlice estimate)",
/* g */  "-U<defn>              Undefine definition for C preprocessor",
/* e */  "-UP                  *Stop after update in place analysis",
/*   */  "-aggvector            Aggressively fuse independent vector loops",
/* M */  "-alliantfx           *Compile for Alliant architecture",
/* a */  "-avector             *Use Alliant style vectors",
/* c */  "-batch                ...options  Submit as NQS batch job (Cray only)",
/* h */  "-bind                 Array descriptor data will not change in calls to SISAL",
/* i */  "-bounds               Generate code to check for various errors",
/* n */  "-c                   *Compile to .o file (requires -e <funct> or -main <funct>)",
/* e */  "-call <funct>         Call <funct> instead of inlining",
/*   */  "-cc=<directive>       Supply <directive> to the C compiler",
/* G */  "-concur              *Generate concurrent code",
/* e */  "-copyinfo             Gather inforation on aggregate copying",
/* n */  "-cpp                  Run the C preprocessor on SISAL files",
/* e */  "-cray                 Cross compile for Cray",
/* r */  "-cvector             *Get vectorization information",
/* a */  "-d                    Debug mode",
/* t */  "-db <database>        Use <database> as inter-module data repository",
/* e */  "-dfuse               *Preform dependent loop fusion",
/* d */  "-double_real          Treat all SISAL real data as double_real data.",
/*   */  "-e <funct>            Use <funct> as an entry point",
/* D */  "-explode              Aggressively explode loops",
/* o */  "-explodeI             Aggressively explode innermost loops",
/*   */  "-externC <funct>      Consider <funct> available as a C external",
/* N */  "-externFORTRAN <funct> Consider <funct> available as a FORTRAN external",
/* o */  "-ff=<directive>       Give <directive> to the local FORTRAN compiler",
/* t */  "-fflopinfo <funct>    Write floating point counts in <funct> to stderr",
/*   */  "-flopinfo             Write all floating point counts to s.info",
/* C */  "-forC                 Compile into a program callable by C",
/* h */  "-forFORTRAN           Compile into a program callable by FORTRAN",
/* a */  "-freeall             *Force release of all storage",
/* n */  "-front=<frontend>     Select SISAL1.2 or SISAL90 language definition",
/* g */  "-fuse                *Perform loop fusion",
/* e */  "-glue                 Disable the optimization of non-inlined function calls",
/*   */  "-h<num>               Slice loops only if cost is greater than <num>",
/* M */  "-help                *Same as -usage",
/* a */  "-hybrid               Generate both C and FORTRAN code",
/* c */  "-i<num>               Set assumed iteration count for loops",
/* h */  "-icse                 Push identical operations out of conditionals",
/* i */  "-info                 Produce an information listing",
/* n */  "-info=<rangelist>     Get more information",
/* e */  "-inlineall            Inline all functions",
/*   */  "-inter                Interactively select functions for inlining",
/* G */  "-l<library>           Add a loader library",
/* e */  "-listing              Produce a root.lst file for each root.sis file",
/* n */  "-main <funct>         Use <funct> as main entry point",
/* e */  "-makeloopreport <file> Create a loop report showing the partitioner's decisions",
/* r */  "-maxconcur            Disable cost estimate.  Parallelize all eligible loops",
/* a */  "-module               Compile files into a callable module",
/* t */  "-movereads           *Move read operations (Cray)",
/* e */  "-n<num>               Consider only loops nested <num> deep for concurrency",
/* d */  "-nancy               *Do not use original Cray microtasking software",
/*   */  "-newchains           *Form Cray X-MP Chains",
/* D */  "-nltss               *Use NLTSS pragmas to generate vectors",
/* o */  "-noOinvar             Do not remove invariants from inner loops",
/*   */  "-noaimp              *Do not optimize array dereferences",
/* N */  "-noamove             *Do not apply anti-movement optimization (from compounds)",
/* o */  "-noassoc              Disable parallel reduction of associative operations",
/* t */  "-nobip               *Disable BIP",
/*   */  "-nobipmv             *Do not allow buffer movement in the C generator",
/* C */  "-nobounds             Do not generate code to check for various errors",
/* h */  "-nobrec              *Disable basic record optimization",
/* a */  "-nocagg              *Do not mark constant aggregates for static building",
/* n */  "-nochains            *Disable vector chaining",
/* g */  "-nocom               *Disable Sequent code improvement migration",
/* e */  "-noconcur             Disable concurrent processing",
/*   */  "-nocpp                Do not run the C preprocessor on SISAL files",
/* M */  "-nocse               *Disable common subr. eliminator",
/* a */  "-nodead              *No dead code removal in optimizer",
/* c */  "-nodfuse              Disable dependent loop fusion",
/* h */  "-nodope              *Do not apply dope vector optimizations",
/* i */  "-nofcopy             *Unknown?",
/* n */  "-nofiss              *Do not attempt record fission",
/* e */  "-nofold              *Do not attempt to fold constant values",
/*   */  "-nofuse               Disable all loop fusion",
/* G */  "-nogcse              *Do not attempt global common subr. elimination",
/* e */  "-noif1opt            *Turn off IF1 code improvers",
/* n */  "-noifuse              Disable independent loop fusion",
/* e */  "-noimp                Compile with the C compiler's optimizers disabled",
/* r */  "-noimp               *Set -nvnoopt loader option for the Crays",
/* a */  "-noinline             Do not inline functions",
/* t */  "-noinvar             *Disable invariant removal optimizer",
/* e */  "-noinvert            *Do not perform loop inversion optimization",
/* d */  "-noload               Do not create the executable, stop with a .o file",
/*   */  "-nomem                Disable build in place analysis",
/* D */  "-nomig               *Do not migrate operations toward users",
/* o */  "-nomovereads         *Move array read operations",
/*   */  "-nonormidx           *Do not normalize array indexing",
/* N */  "-noopt                Disable all optimization",
/* o */  "-nopreb               Disable array prebuilds",
/* t */  "-norag               *Generate code called by FORTRAN",
/*   */  "-noregs              *Do not assign register prefixes to generated C code",
/* C */  "-noscalar             Disable scalar optimizations",
/* h */  "-nosfuse             *Disable select fusion",
/* a */  "-nosplit             *Do not preform loop splitting",
/* n */  "-nostr               *Do not attempt to identify single threaded streams",
/* g */  "-nostrip             *Do not perform return node stripping",
/* e */  "-notgcse             *Do not force global common subr. elimination",
/*   */  "-nounroll             Disable loop unrolling",
/* M */  "-noup                 Disable update in place analysis",
/* a */  "-novector             Disable vectorization",
/* c */  "-o <target>           Name the output <target> not s.out or <source_prefix>.o",
/* h */  "-oo <target>          Just like -o, but sisal extensions are legal.",
/* i */  "-p<num>               Assume <num> processors for partioning",
/* n */  "-patch=<num>          Apply a dynamic patch to one of the backend applications",
/* e */  "-pb<num>              Set array prebuild dimension to <num>",
/*   */  "-prof                *Generate a time execution profile of the compiler",
/* G */  "-progress            *Generate progress report in C code generation",
/* e */  "-r <funct>            Consider <funct> available as a reduction",
/* n */  "-real                 Treat all SISAL double_real data as real data.",
/* e */  "-sdbx                 Generate code to interface with the symbolic debugger",
/* r */  "-seq                  Compile for sequential execution",
/* a */  "-tgcse               *Force global Common Subr. Elimination",
/* t */  "-time <funct>         Generating timing code for this function",
/* e */  "-timeall              Generate timing code for all functions",
/* d */  "-tmpdir <dirname>     Put intermediate temp files in <dirname>",
/*   */  "-trace <funct>        Generating tracing code for this function",
/* D */  "-traceall             Generate tracing code for all functions",
/* o */  "-u<num>               Unroll loops with less than <num> iterations",
/*   */  "-usage                Produce this list",
/* N */  "-useloopreport <file> Use loopreport from a previous compilation",
/* o */  "-v                    Verbose mode",
/* t */  "-vector              *Enable vectorization",
/*   */  "-w                    Disable warning messages",
/* C */  "-xchains             *Allow vector chaining",
/* h */   NULL };
/* a */  static void PrintUsageTable(argv,idx)
/* n */  char *argv[]; int idx;
/* g */  {
/* e */    char **p,*q,*r,buf[128],lbuf[128],c;
/*   */    int len,cnt=0;
/* M */    if (argv[idx+1]) {
/* a */       while(argv[++idx]) {
/* c */         len=0;q=argv[idx];r=buf;
/* h */         while(*q) {len++; c= *q++; if (isupper(c)) c=tolower(c);*r++=c;};
/* i */         *r='\0';
/* n */        for (p=Usage;*p;p++) {
/* e */          q= *p;r=lbuf;
/*   */          while(*q) {c= *q++; if (isupper(c)) c=tolower(c); *r++=c;};
/* G */           *r='\0';
/* e */          for(q=lbuf;*q;q++) if (strncmp(q,buf,len)==0) { (void)puts(*p); cnt++; break; }
/* n */        }
/* e */      }
/* r */      if (!cnt) puts("No matches");
/* a */    } else {
/* t */      for (p=Usage;*p;p++) (void)puts(*p);
/* e */    }
/* d */    exit(1);
/*   */  }
