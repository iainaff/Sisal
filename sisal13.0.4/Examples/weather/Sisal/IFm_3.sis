DEFINE IFACTm_3

type ArrReal1 = ARRAY [real]

function IFACTm_3(m, la, iink, jink, jump, inc1, inc2 : integer; 
		    a, ci, trigs : ArrReal1
		    RETURNS ArrReal1)
FOR INITIAL
sin60 := 0.866025403784437;
k := 0;
ia := 1;
ja := 1;
c := ci;

WHILE k <= m / 2 REPEAT
k := old k + la;
ia,  ja,  c := 
  IF old k = 0
  THEN	LET ia1, ja1, c1 := 

	FOR INITIAL
	l := 1;
	ia1 := old ia;
	ja1 := old ja;
	c1 := old c;

	WHILE l <= la REPEAT
	l := old l + 1;
	ia1 := old ia1 + inc1;
	ja1 := old ja1 + inc2;
	ib := old ia1 + iink;
	ic := ib + iink;
	jb := old ja1 + jink;
	a1 := a[ib] + a[ic];
	a2 := a[old ia1] - 0.5 * a1;
	a3 := sin60 * (a[ic] - a[ib]);
	c1 := old c1[old ja1 : a[old ia1] + a1; jb : a2; jb + 1 : a3];

	RETURNS VALUE of ia1
		VALUE of ja1
		VALUE of c1
	END FOR

	IN ia1 + jump, ja1, c1
	END LET

ELSEIF 2 * old k < m
THEN	LET ia1, ja1, c1 := 

	FOR INITIAL
	kb := old k * 2;
	kc := kb * 2;
	lower := jink + 2;
	lupper := iink * 2 + jink - 2;
	l := lower;
	ia1 := old ia;
	ja1 := old ja;
	c1 := old c;

	WHILE l <= lupper REPEAT
	l := old l + 4;
	ia1 := old ia1 + inc1;
	ja1 := old ja1 + inc2;
	ib := old ia1 + iink;
	ic := ib + iink;
	jb := old ja1 + jink;
	jcxx := old l - old ja1;
	tempr1 := a[ib] * trigs[kb + 1] - a[ib + 1] * trigs[kb + 2];
	tempi1 := a[ib] * trigs[kb + 2] + a[ib + 1] * trigs[kb + 1];
	tempr2 := a[ic] * trigs[kc + 1] - a[ic + 1] * trigs[kc + 2];
	tempi2 := a[ic] * trigs[kc + 2] + a[ic + 1] * trigs[kc + 1];
	a1 := tempr1 + tempr2;
	b1 := tempi1 + tempi2;
	a2 := a[old ia1] - 0.5 * a1;
	b2 := a[old ia1 + 1] - 0.5 * b1;
	a3 := sin60 * (tempr2 - tempr1);
	b3 := sin60 * (tempi2 - tempi1);
	c1 := old c1[old ja1:a[old ia1] + a1; jb:a2 - b3; jcxx:a2 + b3; 
	   old ja1 + 1:a[old ia1 + 1] + b1; jb + 1:b2 + a3; jcxx + 1:a3 - b2]; 

	RETURNS VALUE of ia1
		VALUE of ja1
		VALUE of c1
	END FOR

	IN ia1 + jump, ja1, c1
	END LET

ELSE	FOR INITIAL
	l := 1;
	ia1 := old ia;
	ja1 := old ja;
	c1 := old c;

	WHILE  l <= la REPEAT
	l := old l + 1;
	ia1 := old ia1 + inc1;
	ja1 := old ja1 + inc2;
	ib := old ia1 + iink;
	ic := ib + iink;
	jb := old ja1 + jink;
	a1 := a[ib] - a[ic];
	c1 := old c1[old ja1 : a[old ia1] + 0.5 * a1; jb : a[old ia1] - a1; 
		   old ja1 + 1 : -sin60 * (a[ib] + a[ic])];

	RETURNS VALUE of ia1
		VALUE of ja1
		VALUE of c1
	END FOR
END IF;

RETURNS VALUE of c
END FOR
end function
